#Late QCD
#T << Œõ


function LLaplacian_2D!(P,A,Œîx)
    B = CircularArray(A);
    Threads.@threads for üòÑ ‚àà CartesianIndices(P)
        (i,j) = Tuple(üòÑ)
        P[i,j] = @fastmath (-B[i+2,j] + 16B[i+1,j] 
            + 16B[i-1,j] -B[i-2,j] 
            -B[i,j+2] + 16B[i,j+1] 
            + 16B[i,j-1] -B[i,j-2] 
            - 60B[i,j]) /(12Œîx^2);
    end
    return nothing
end


function Lfupdate_2D!(F,M,A,AÃá,Œ∑,Œ∑‚Çì)
    n = 6.68;
    @inbounds Threads.@threads for üòÑ ‚àà CartesianIndices(F)
        (i,j) = Tuple(üòÑ)
        F[i,j] = @fastmath M[i,j] - Œ∑‚Çì^n * Œ∑^2 * sin(A[i,j]) - 2/Œ∑ * AÃá[i,j];
    end
    return nothing
end


function LAupdate_2D!(A,Œît,AÃá,F)
    @inbounds Threads.@threads for üòÑ ‚àà CartesianIndices(A)
        (i,j) = Tuple(üòÑ)
        A[i,j] = @fastmath A[i,j] .+ Œît .* (AÃá[i,j] .+ 0.5Œît .* F[i,j])
    end
    return nothing
end


function Lvelupdate_2D!(AÃá,Œît,F,M,A,Œ∑,Œ∑‚Çì)
    n = 6.68
    @inbounds Threads.@threads for üòÑ ‚àà CartesianIndices(AÃá)
        (i,j) = Tuple(üòÑ)
        AÃá[i,j] = @fastmath AÃá[i,j] .+ 0.5Œît .* (F[i,j] .+ M[i,j] - Œ∑‚Çì^n * Œ∑^2 * sin(A[i,j]) - 2/Œ∑ * AÃá[i,j])
    end
    return nothing
end



function LŒ∑time(time,f‚Çê)
    t‚ÇÅ = 1.61e-10 * (f‚Çê/1e12)
    Œ∑ = (time/t‚ÇÅ)^0.5
    T = 42.3e3 * (f‚Çê/1e12)^(-0.5)

    Œ∑‚Çì = T/103;

    if Œ∑‚Çì > Œ∑
        Œ∑‚Çì = Œ∑
    end

    return Œ∑‚Çì,Œ∑
end

function Lupdate_2D!(A,AÃá,M,F,Œîx,Œît,time,f‚Çê)

    Œ∑‚Çì,Œ∑ = LŒ∑time(time,f‚Çê);
    

    #F‚ÇÅ .= M‚ÇÅ .- a.^Œ≤ .* Œª .* A‚ÇÅ .*(A‚ÇÅ.^2 .+ A‚ÇÇ.^2 .- Œ∑.^2) .- Œ± .* ¬© .* AÃá‚ÇÅ ./time
    #F‚ÇÇ .= M‚ÇÇ .- a.^Œ≤ .* Œª .* A‚ÇÇ .*(A‚ÇÅ.^2 .+ A‚ÇÇ.^2 .- Œ∑.^2) .- Œ± .* ¬© .* AÃá‚ÇÇ ./time

    Lfupdate_2D!(F,M,A,AÃá,Œ∑,Œ∑‚Çì)

    #A‚ÇÅ .= A‚ÇÅ .+ Œît .* (AÃá‚ÇÅ .+ 0.5Œît .* F‚ÇÅ)
    #A‚ÇÇ .= A‚ÇÇ .+ Œît .* (AÃá‚ÇÇ .+ 0.5Œît .* F‚ÇÇ)

    LAupdate_2D!(A,Œît,AÃá,F)

    LLaplacian_2D!(M,A,Œîx)

    #AÃá‚ÇÅ .= AÃá‚ÇÅ .+ 0.5Œît .* (F‚ÇÅ .+ M‚ÇÅ .- a‚ÇÅ.^Œ≤ .* Œª .* A‚ÇÅ .* (A‚ÇÅ.^2 .+ A‚ÇÇ.^2 .- Œ∑.^2) .- Œ± .* ¬© .* AÃá‚ÇÅ ./ (time + Œît))
    #AÃá‚ÇÇ .= AÃá‚ÇÇ .+ 0.5Œît .* (F‚ÇÇ .+ M‚ÇÇ .- a‚ÇÅ.^Œ≤ .* Œª .* A‚ÇÇ .* (A‚ÇÅ.^2 .+ A‚ÇÇ.^2 .- Œ∑.^2) .- Œ± .* ¬© .* AÃá‚ÇÇ ./ (time + Œît))

    Œ∑‚Çì,Œ∑ = LŒ∑time(time+Œît,f‚Çê)

    Lvelupdate_2D!(AÃá,Œît,F,M,A,Œ∑,Œ∑‚Çì)

    return nothing
end

function Lrun_2D!(N,t‚ÇÄ,t,A‚ÇÅ,A‚ÇÇ,AÃá‚ÇÅ,AÃá‚ÇÇ,Œîx,Œît,f‚Çê,i)
    time = t‚ÇÄ

    M‚ÇÅ = zeros(N,N);
    M‚ÇÇ = zeros(N,N);

    F‚ÇÅ = zeros(N,N);
    F‚ÇÇ = zeros(N,N);

    moo = zeros(N,N);
    Laplacian_2D!(M‚ÇÅ,M‚ÇÇ,A‚ÇÅ,A‚ÇÇ,Œîx)

    angle = zeros(N,N);

    #f‚Çõ = Œîx
    #freq_s = f‚Çõ/2 * range(-1,stop = 1,length = N)
    #freq = f‚Çõ/2 * range(0,stop = 1, length = N/2)
    k_freq = fftfreq(N)*N
    kx,ky = meshgrid(k_freq,k_freq)

    knrm = sqrt.( kx.^2 + ky.^2)
    knrm = collect(Iterators.flatten(knrm))

    kbins = range(0.5, N/2+1, step = 1)
    kvals = 0.5 * (kbins[2:end] + kbins[1:end-1])


    for lo ‚àà 1:round(t/Œît,digits = 0)
        time = round(time,digits = 1);
        if lo % 10 == 0
            mooing!(moo,A‚ÇÅ,A‚ÇÇ);
            setting!(moo);
            angler!(angle,A‚ÇÅ,A‚ÇÇ);

            PyPlot.imsave("Late/1"*string(i)*"/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png",moo,vmin=0,vmax = 1,cmap = "gray")
            
            f_image = FFTW.fft(moo)
            f_images = (abs.(f_image)).^2
            f_images = collect(Iterators.flatten(f_images))
   
            Abins,_,_ = stats.binned_statistic(knrm,f_images,statistic = "mean",bins = kbins)
            Abins = œÄ* Abins.* (kbins[2:end].^2 - kbins[1:end-1].^2)
         
            plotd = Plots.plot(kvals,Abins,xaxis= :log,yaxis =:log,legend = false, ylims = (1e1,1e8))
            Plots.savefig(plotd,"Late/Fourier/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png")
            
            f_image = FFTW.fft(angle)
            f_images = (abs.(f_image)).^2
            f_images = collect(Iterators.flatten(f_images))
   
            Abins,_,_ = stats.binned_statistic(knrm,f_images,statistic = "mean",bins = kbins)
            Abins = œÄ* Abins.* (kbins[2:end].^2 - kbins[1:end-1].^2)
         
            plotc = Plots.plot(kvals,Abins,xaxis= :log,yaxis =:log,legend = false, ylims = (1e6,1e11))
            Plots.savefig(plotc,"Late/Angle/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png")
            

            PyPlot.imsave("Late/"*string(i)*"/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png",angle,vmin=-œÄ,vmax = œÄ,cmap = "twilight")
        end
        PQupdate_2D!(A‚ÇÅ,A‚ÇÇ,AÃá‚ÇÅ,AÃá‚ÇÇ,M‚ÇÅ,M‚ÇÇ,F‚ÇÅ,F‚ÇÇ,Œîx,Œît,t‚ÇÄ,time,f‚Çê)
        time = time + Œît

    end

    return time
end


function Lplotting_2D!(N,t‚ÇÄ,t‚ÇÅ,t,A,AÃá,Œîx,Œît,f‚Çê,i)

    time = t‚ÇÅ

    M = zeros(N,N);

    F = zeros(N,N);

    LLaplacian_2D!(M,A,Œîx)

    # moo = zeros(N,N);
    k_freq = fftfreq(N)*N
    kx,ky = meshgrid(k_freq,k_freq)

    knrm = sqrt.( kx.^2 + ky.^2)
    knrm = collect(Iterators.flatten(knrm))

    kbins = range(0.5, N/2+1, step = 1)
    kvals = 0.5 * (kbins[2:end] + kbins[1:end-1])

    for lo ‚àà 1:round(t/Œît,digits = 0)
        time = round(time,digits = 10);
        if lo % 10 == 0
        #     mooing!(moo,A‚ÇÅ,A‚ÇÇ);
        #     setting!(moo);
        #     #save("plottting_m/"*lpad( string(trunc(Int,time-t‚ÇÄ)) ,3,"0")*".png", colorview(Gray,moo));
        #     PyPlot.imsave("plottting_m/"*lpad( string(trunc(Int,time-t‚ÇÄ)) ,3,"0")*".png",moo,vmin=0,vmax = 1,cmap = "gray")
            
            f_image = FFTW.fft(A)
            f_images = (abs.(f_image)).^2
            f_images = collect(Iterators.flatten(f_images))

            Abins,_,_ = stats.binned_statistic(knrm,f_images,statistic = "mean",bins = kbins)
            Abins = œÄ* Abins.* (kbins[2:end].^2 - kbins[1:end-1].^2)
        
            plotc = Plots.plot(kvals,Abins,xaxis= :log,yaxis =:log,legend = false, ylims = (1e6,1e11))
            Plots.savefig(plotc,"Late/Angle/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png")
            
        
            PyPlot.imsave("Late/"*string(i)*"/"*lpad( string(trunc(Int,t‚ÇÄ+lo/10 - 1)) ,3,"0")*".png",A,vmin=-œÄ,vmax = œÄ,cmap = "twilight")
        end
        Lupdate_2D!(A,AÃá,M,F,Œîx,Œît,time,f‚Çê)
        time = time + Œît

    end

    return nothing
end