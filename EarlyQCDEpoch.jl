#Early Times in QCD Epoch
#T ‚àº Œõ 
#High Temperature mass of the axion is neglected.
#Œª = 1, free parameter

function Laplacian_2D!(P‚ÇÅ,P‚ÇÇ,A‚ÇÅ,A‚ÇÇ,Œîx)
    B‚ÇÅ = CircularArray(A‚ÇÅ);
    B‚ÇÇ = CircularArray(A‚ÇÇ);
    Threads.@threads for üòÑ ‚àà CartesianIndices(P‚ÇÅ)
        (i,j) = Tuple(üòÑ)
        P‚ÇÅ[i,j] = @fastmath (-B‚ÇÅ[i+2,j] + 16B‚ÇÅ[i+1,j] 
            + 16B‚ÇÅ[i-1,j] -B‚ÇÅ[i-2,j] 
            -B‚ÇÅ[i,j+2] + 16B‚ÇÅ[i,j+1] 
            + 16B‚ÇÅ[i,j-1] -B‚ÇÅ[i,j-2] 
            - 60B‚ÇÅ[i,j]) /(12Œîx^2);
        P‚ÇÇ[i,j] = @fastmath (-B‚ÇÇ[i+2,j] + 16B‚ÇÇ[i+1,j] 
            + 16B‚ÇÇ[i-1,j] -B‚ÇÇ[i-2,j] 
            -B‚ÇÇ[i,j+2] + 16B‚ÇÇ[i,j+1] 
            + 16B‚ÇÇ[i,j-1] -B‚ÇÇ[i,j-2] 
            - 60B‚ÇÇ[i,j]) /(12Œîx^2);  
    end
    return nothing
end


function EQCDfupdate_2D!(F‚ÇÅ,F‚ÇÇ,M‚ÇÅ,M‚ÇÇ,C‚ÇÅ,C‚ÇÇ,A‚ÇÅ,A‚ÇÇ,AÃá‚ÇÅ,AÃá‚ÇÇ,Œ∑,Œª,Œ∑‚Çì)
    n = 6.68;
    @inbounds Threads.@threads for üòÑ ‚àà CartesianIndices(F‚ÇÅ)
        (i,j) = Tuple(üòÑ)
        F‚ÇÅ[i,j] = @fastmath M‚ÇÅ[i,j] - Œª * C‚ÇÅ[i,j] * Œ∑^2 * (A‚ÇÅ[i,j]^2 .+ A‚ÇÇ[i,j]^2 .- 1) + Œ∑‚Çì^n *Œ∑^2 * C‚ÇÇ[i,j]^2/((A‚ÇÅ[i,j]^2 .+ A‚ÇÇ[i,j]^2)^1.5) - 2/Œ∑ * AÃá‚ÇÅ[i,j];
        F‚ÇÇ[i,j] = @fastmath M‚ÇÇ[i,j] - Œª * C‚ÇÇ[i,j] * Œ∑^2 * (A‚ÇÅ[i,j]^2 .+ A‚ÇÇ[i,j]^2 .- 1) - Œ∑‚Çì^n *Œ∑^2 * C‚ÇÅ[i,j]*C‚ÇÇ[i,j]/((A‚ÇÅ[i,j]^2 .+ A‚ÇÇ[i,j]^2)^1.5) - 2/Œ∑ * AÃá‚ÇÇ[i,j];
    end
    return nothing
end


function EQCDAupdate_2D!(A‚ÇÅ,A‚ÇÇ,Œît,AÃá‚ÇÅ,AÃá‚ÇÇ,F‚ÇÅ,F‚ÇÇ)
    @inbounds Threads.@threads for üòÑ ‚àà CartesianIndices(A‚ÇÅ)
        (i,j) = Tuple(üòÑ)
        A‚ÇÅ[i,j] = @fastmath A‚ÇÅ[i,j] .+ Œît .* (AÃá‚ÇÅ[i,j] .+ 0.5Œît .* F‚ÇÅ[i,j])
        A‚ÇÇ[i,j] = @fastmath A‚ÇÇ[i,j] .+ Œît .* (AÃá‚ÇÇ[i,j] .+ 0.5Œît .* F‚ÇÇ[i,j])
    end
    return nothing
end


function EQCDvelupdate_2D!(AÃá‚ÇÅ,AÃá‚ÇÇ,Œît,F‚ÇÅ,F‚ÇÇ,M‚ÇÅ,M‚ÇÇ,C‚ÇÅ,C‚ÇÇ,A‚ÇÅ,A‚ÇÇ,Œ∑,Œª,Œ∑‚Çì)
    n = 6.68
    @inbounds Threads.@threads for üòÑ ‚àà CartesianIndices(AÃá‚ÇÅ)
        (i,j) = Tuple(üòÑ)
        AÃá‚ÇÅ[i,j] = @fastmath AÃá‚ÇÅ[i,j] .+ 0.5Œît .* (F‚ÇÅ[i,j] .+ M‚ÇÅ[i,j] - Œª * C‚ÇÅ[i,j] * Œ∑^2 * (A‚ÇÅ[i,j]^2 .+ A‚ÇÇ[i,j]^2 .- 1) + Œ∑‚Çì^n *Œ∑^2 * C‚ÇÇ[i,j]^2/((A‚ÇÅ[i,j]^2 .+ A‚ÇÇ[i,j]^2)^1.5) - 2/Œ∑ * AÃá‚ÇÅ[i,j])
        AÃá‚ÇÇ[i,j] = @fastmath AÃá‚ÇÇ[i,j] .+ 0.5Œît .* (F‚ÇÇ[i,j] .+ M‚ÇÇ[i,j] - Œª * C‚ÇÇ[i,j] * Œ∑^2 * (A‚ÇÅ[i,j]^2 .+ A‚ÇÇ[i,j]^2 .- 1) - Œ∑‚Çì^n *Œ∑^2 * C‚ÇÅ[i,j]*C‚ÇÇ[i,j]/((A‚ÇÅ[i,j]^2 .+ A‚ÇÇ[i,j]^2)^1.5) - 2/Œ∑ * AÃá‚ÇÇ[i,j])
    end
    return nothing
end

function mass(f‚Çê)
    f‚Çê = f‚Çê*1e3
    n = 1;
    Œõ = 400;
    Œ±‚Çê = 1.68e-7;
    m·µ§ = 1.7; #1.7 - 3.3MeV
    m‚Ççd‚Çé = 4.1; #4.1 - 5.8MeV
    m‚ÇçœÄ‚Çé = 135;
    f‚ÇçœÄ‚Çé = 130;
    T = 0.981 * (f‚Çê/1e12)^(-2/(4 + n))

    mass = Œ±‚Çê * Œõ^(4+n) / (f‚Çê^2 * T^n)
    m‚Çê = sqrt( m‚ÇçœÄ‚Çé^2 * f‚ÇçœÄ‚Çé^2 / f‚Çê^2 * m·µ§ * m‚Ççd‚Çé / (m·µ§ + m‚Ççd‚Çé)^2 )
    if mass > m‚Çê
        mass = m‚Çê
    end
    return mass
end

function Œ∑time(time,f‚Çê)
    b = 6.68
    t‚ÇÅ = 3.01e-7 * (f‚Çê/1e12)^(4/(4+b))
    n = 6.68
    Œ∑ = (time/t‚ÇÅ)^0.5;
    T = 0.981e3 * (f‚Çê/1e12)^(-2/(4 + n))

    Œ∑‚Çì = T/103;

    if Œ∑‚Çì > Œ∑
        Œ∑‚Çì = Œ∑
    end

    return Œ∑‚Çì,Œ∑
end

function EQCDupdate_2D!(A‚ÇÅ,A‚ÇÇ,AÃá‚ÇÅ,AÃá‚ÇÇ,M‚ÇÅ,M‚ÇÇ,F‚ÇÅ,F‚ÇÇ,Œîx,Œît,time,f‚Çê)

    #Œª = (f‚Çê/mass(f‚Çê))^2;

    Œª = 50;
    Œ∑‚Çì,Œ∑ = Œ∑time(time,f‚Çê);
    

    #F‚ÇÅ .= M‚ÇÅ .- a.^Œ≤ .* Œª .* A‚ÇÅ .*(A‚ÇÅ.^2 .+ A‚ÇÇ.^2 .- Œ∑.^2) .- Œ± .* ¬© .* AÃá‚ÇÅ ./time
    #F‚ÇÇ .= M‚ÇÇ .- a.^Œ≤ .* Œª .* A‚ÇÇ .*(A‚ÇÅ.^2 .+ A‚ÇÇ.^2 .- Œ∑.^2) .- Œ± .* ¬© .* AÃá‚ÇÇ ./time

    EQCDfupdate_2D!(F‚ÇÅ,F‚ÇÇ,M‚ÇÅ,M‚ÇÇ,A‚ÇÅ,A‚ÇÇ,A‚ÇÅ,A‚ÇÇ,AÃá‚ÇÅ,AÃá‚ÇÇ,Œ∑,Œª,Œ∑‚Çì)

    #A‚ÇÅ .= A‚ÇÅ .+ Œît .* (AÃá‚ÇÅ .+ 0.5Œît .* F‚ÇÅ)
    #A‚ÇÇ .= A‚ÇÇ .+ Œît .* (AÃá‚ÇÇ .+ 0.5Œît .* F‚ÇÇ)

    EQCDAupdate_2D!(A‚ÇÅ,A‚ÇÇ,Œît,AÃá‚ÇÅ,AÃá‚ÇÇ,F‚ÇÅ,F‚ÇÇ)

    Laplacian_2D!(M‚ÇÅ,M‚ÇÇ,A‚ÇÅ,A‚ÇÇ,Œîx)

    #AÃá‚ÇÅ .= AÃá‚ÇÅ .+ 0.5Œît .* (F‚ÇÅ .+ M‚ÇÅ .- a‚ÇÅ.^Œ≤ .* Œª .* A‚ÇÅ .* (A‚ÇÅ.^2 .+ A‚ÇÇ.^2 .- Œ∑.^2) .- Œ± .* ¬© .* AÃá‚ÇÅ ./ (time + Œît))
    #AÃá‚ÇÇ .= AÃá‚ÇÇ .+ 0.5Œît .* (F‚ÇÇ .+ M‚ÇÇ .- a‚ÇÅ.^Œ≤ .* Œª .* A‚ÇÇ .* (A‚ÇÅ.^2 .+ A‚ÇÇ.^2 .- Œ∑.^2) .- Œ± .* ¬© .* AÃá‚ÇÇ ./ (time + Œît))

    Œ∑‚Çì,Œ∑ = Œ∑time(time+Œît,f‚Çê);

    EQCDvelupdate_2D!(AÃá‚ÇÅ,AÃá‚ÇÇ,Œît,F‚ÇÅ,F‚ÇÇ,M‚ÇÅ,M‚ÇÇ,A‚ÇÅ,A‚ÇÇ,A‚ÇÅ,A‚ÇÇ,Œ∑,Œª,Œ∑‚Çì)

    return nothing
end




function EQCDrun_2D!(N,t‚ÇÄ,t,A‚ÇÅ,A‚ÇÇ,AÃá‚ÇÅ,AÃá‚ÇÇ,Œîx,Œît,f‚Çê,i)

    time = t‚ÇÄ

    M‚ÇÅ = zeros(N,N);
    M‚ÇÇ = zeros(N,N);

    F‚ÇÅ = zeros(N,N);
    F‚ÇÇ = zeros(N,N);

    moo = zeros(N,N);
    Laplacian_2D!(M‚ÇÅ,M‚ÇÇ,A‚ÇÅ,A‚ÇÇ,Œîx)

    angle = zeros(N,N);

    #f‚Çõ = Œîx
    #freq_s = f‚Çõ/2 * range(-1,stop = 1,length = N)
    #freq = f‚Çõ/2 * range(0,stop = 1, length = N/2)
    k_freq = fftfreq(N)*N
    kx,ky = meshgrid(k_freq,k_freq)

    knrm = sqrt.( kx.^2 + ky.^2)
    knrm = collect(Iterators.flatten(knrm))

    kbins = range(0.5, N/2+1, step = 1)
    kvals = 0.5 * (kbins[2:end] + kbins[1:end-1])


    for lo ‚àà 1:round(t/Œît,digits = 0)
        time = round(time,digits = 1);
        if lo % 10 == 0
            mooing!(moo,A‚ÇÅ,A‚ÇÇ);
            setting!(moo);
            angler!(angle,A‚ÇÅ,A‚ÇÇ);

            PyPlot.imsave("EQCD/1"*string(i)*"/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png",moo,vmin=0,vmax = 1,cmap = "gray")
            
            f_image = FFTW.fft(moo)
            f_images = (abs.(f_image)).^2
            f_images = collect(Iterators.flatten(f_images))
   
            Abins,_,_ = stats.binned_statistic(knrm,f_images,statistic = "mean",bins = kbins)
            Abins = œÄ* Abins.* (kbins[2:end].^2 - kbins[1:end-1].^2)
         
            plotd = Plots.plot(kvals,Abins,xaxis= :log,yaxis =:log,legend = false, ylims = (1e1,1e8))
            Plots.savefig(plotd,"EQCD/Fourier/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png")
            
            f_image = FFTW.fft(angle)
            f_images = (abs.(f_image)).^2
            f_images = collect(Iterators.flatten(f_images))
   
            Abins,_,_ = stats.binned_statistic(knrm,f_images,statistic = "mean",bins = kbins)
            Abins = œÄ* Abins.* (kbins[2:end].^2 - kbins[1:end-1].^2)
         
            plotc = Plots.plot(kvals,Abins,xaxis= :log,yaxis =:log,legend = false, ylims = (1e6,1e11))
            Plots.savefig(plotc,"EQCD/Angle/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png")
            

            PyPlot.imsave("EQCD/"*string(i)*"/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png",angle,vmin=-œÄ,vmax = œÄ,cmap = "twilight")
        end
        PQupdate_2D!(A‚ÇÅ,A‚ÇÇ,AÃá‚ÇÅ,AÃá‚ÇÇ,M‚ÇÅ,M‚ÇÇ,F‚ÇÅ,F‚ÇÇ,Œîx,Œît,t‚ÇÄ,time,f‚Çê)
        time = time + Œît

    end

    return time
end





function EQCDplotting_2D!(N,t‚ÇÄ,t‚ÇÅ,t,A‚ÇÅ,A‚ÇÇ,AÃá‚ÇÅ,AÃá‚ÇÇ,Œîx,Œît,f‚Çê,i)


    time = t‚ÇÅ

    M‚ÇÅ = zeros(N,N);
    M‚ÇÇ = zeros(N,N);

    F‚ÇÅ = zeros(N,N);
    F‚ÇÇ = zeros(N,N);

    Laplacian_2D!(M‚ÇÅ,M‚ÇÇ,A‚ÇÅ,A‚ÇÇ,Œîx)

    moo = zeros(N,N);
    angle = zeros(N,N);
    angler!(angle,A‚ÇÅ,A‚ÇÇ);

    k_freq = fftfreq(N)*N
    kx,ky = meshgrid(k_freq,k_freq)

    knrm = sqrt.( kx.^2 + ky.^2)
    knrm = collect(Iterators.flatten(knrm))

    kbins = range(0.5, N/2+1, step = 1)
    kvals = 0.5 * (kbins[2:end] + kbins[1:end-1])

    for lo ‚àà 1:round(t/Œît,digits = 0)
        time = round(time,digits = 10);
        if lo % 10 == 0
            mooing!(moo,A‚ÇÅ,A‚ÇÇ);
            setting!(moo);
            angler!(angle,A‚ÇÅ,A‚ÇÇ);
            PyPlot.imsave("EQCD/1"*string(i)*"/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png",moo,vmin=0,vmax = 1,cmap = "gray")

            f_image = FFTW.fft(moo)
            f_images = (abs.(f_image)).^2
            f_images = collect(Iterators.flatten(f_images))
   
            Abins,_,_ = stats.binned_statistic(knrm,f_images,statistic = "mean",bins = kbins)
            Abins = œÄ* Abins.* (kbins[2:end].^2 - kbins[1:end-1].^2)
         
            plotd = Plots.plot(kvals,Abins,xaxis= :log,yaxis =:log,legend = false, ylims = (1e1,1e8))
            Plots.savefig(plotd,"EQCD/Fourier/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png")
            
            f_image = FFTW.fft(angle)
            f_images = (abs.(f_image)).^2
            f_images = collect(Iterators.flatten(f_images))
   
            Abins,_,_ = stats.binned_statistic(knrm,f_images,statistic = "mean",bins = kbins)
            Abins = œÄ* Abins.* (kbins[2:end].^2 - kbins[1:end-1].^2)
         
            plotc = Plots.plot(kvals,Abins,xaxis= :log,yaxis =:log,legend = false, ylims = (1e6,1e11))
            Plots.savefig(plotc,"EQCD/Angle/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png")
            

            PyPlot.imsave("EQCD/"*string(i)*"/"*lpad( string(trunc(Int,t‚ÇÄ + lo/10 - 1)) ,3,"0")*".png",angle,vmin=-œÄ,vmax = œÄ,cmap = "twilight")

        end
        EQCDupdate_2D!(A‚ÇÅ,A‚ÇÇ,AÃá‚ÇÅ,AÃá‚ÇÇ,M‚ÇÅ,M‚ÇÇ,F‚ÇÅ,F‚ÇÇ,Œîx,Œît,time,f‚Çê)
        time = time + Œît
        
    end

    return nothing
end